{"version":3,"sources":["services/Calculator.js","redux/reducers.js","redux/store.js","redux/actionTypes.js","views/Config.jsx","views/TopBar.jsx","views/Input.jsx","redux/actions.js","views/Output.jsx","App.jsx","index.js"],"names":["configState","brokerageFeeRate","minBrokerageFee","clearingFeeRate","maximumClearingFee","accessFeeRate","gst","getBudget","buyingPrice","quantity","arguments","length","undefined","proceeds","brokerageFee","roundUpTo2Decimal","Math","max","clearingFee","min","accessFee","gstAmount","value","ceil","initialState","buyPrice","budget","minProfit","calculatedSellingPrice","createStore","calculatedBudget","state","action","endState","Object","objectSpread","type","buyPriceInput","parseFloat","payload","quantityInput","minProfitInput","getSellingPrice","Config","react_default","a","createElement","Component","withStyles","root","flexGrow","grow","menuButton","marginLeft","marginRight","props","classes","className","AppBar_default","position","Toolbar_default","IconButton_default","color","aria-label","Menu_default","Typography_default","variant","views_Config","inputTypeEnum","BUY_PRICE","QUANTITY","BUDGET","MIN_PROFIT","PrettyNumberFormat","inputRef","onChange","other","objectWithoutProperties","number_format_default","assign","getInputRef","onValueChange","values","target","thousandSeparator","Input","handleChange","inputType","event","inputValue","_this","setBuyPrice","setQuantity","setBudget","setMinProfit","setState","defineProperty","this","Card_default","card","CardContent_default","TextField_default","id","classNames","margin","textField","label","InputProps","startAdornment","InputAdornment_default","inputComponent","Grid_default","container","spacing","item","xs","sm","disabled","connect","budgetInput","theme","display","flexWrap","minWidth","unit","flexBasis","Output","App","Fragment","CssBaseline_default","views_TopBar","views_Input","views_Output","rootElement","document","getElementById","store","subscribe","configStateListener","getState","ReactDOM","render","es","src_App"],"mappings":"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","file":"static/js/main.ea1090b2.chunk.js","sourcesContent":["/* Rules\n * =====\n * - GST on brokerage fee, clearing fee and SGX trading fee (excluding share price)\n * - Brokerage fee, clearing fee, SGX trading fee is round up to 2 decimal (always round up)\n */\nimport store from '../redux/store';\n\nlet configState = {\n  brokerageFeeRate: null,\n  minBrokerageFee: null,\n  clearingFeeRate: null,\n  maximumClearingFee: null,\n  accessFeeRate: null,\n  gst: null\n}\n\nexport const configStateListener = (state) => {\n  const { brokerageFeeRate, minBrokerageFee, clearingFeeRate, maximumClearingFee, accessFeeRate, gst} = state;\n  configState = {\n    brokerageFeeRate: brokerageFeeRate,\n    minBrokerageFee: minBrokerageFee,\n    clearingFeeRate: clearingFeeRate,\n    maximumClearingFee: maximumClearingFee,\n    accessFeeRate: accessFeeRate,\n    gst: gst\n  }\n}\n\nexport const getBudget = (buyingPrice, quantity,\n    brokerageFeeRate = configState.brokerageFeeRate,\n    minBrokerageFee = configState.minBrokerageFee,\n    clearingFeeRate = configState.clearingFeeRate,\n    maximumClearingFee = configState.maximumClearingFee,\n    accessFeeRate = configState.accessFeeRate,\n    gst = configState.gst) => {\n  const proceeds = buyingPrice * quantity;\n  const brokerageFee = roundUpTo2Decimal(Math.max(proceeds * brokerageFeeRate, minBrokerageFee));\n  const clearingFee = roundUpTo2Decimal(Math.min(proceeds * clearingFeeRate, maximumClearingFee));\n  const accessFee = roundUpTo2Decimal(proceeds * accessFeeRate);\n  const gstAmount = roundUpTo2Decimal(gst * (brokerageFee + clearingFee + accessFee));\n\n  return roundUpTo2Decimal(proceeds + brokerageFee + clearingFee + accessFee + gstAmount);\n}\n\n// export const getQuantity = (buyingPrice, budget, rounding = 100,\n//     brokerageFeeRate = configState.brokerageFeeRate,\n//     minBrokerageFee = configState.minBrokerageFee,\n//     clearingFeeRate = configState.clearingFeeRate,\n//     maximumClearingFee = configState.maximumClearingFee,\n//     accessFeeRate = configState.accessFeeRate,\n//     gst = configState.gst) => {\n//   const totalFeesRateNoMinMax = (1 + gst) * (brokerageFeeRate + clearingFeeRate + accessFeeRate);\n//   const quantity = budget / (1 + (totalFeesRateNoMinMax));\n//   return quantity;\n// }\n\nexport const getSellingPrice = (quantity, budget, minProfit,\n    brokerageFeeRate = configState.brokerageFeeRate,\n    minBrokerageFee = configState.minBrokerageFee,\n    clearingFeeRate = configState.clearingFeeRate,\n    maximumClearingFee = configState.maximumClearingFee,\n    accessFeeRate = configState.accessFeeRate,\n    gst = configState.gst) => {\n  if (quantity === null || budget === null || minProfit === null) {\n    return null;\n  }\n\n  const totalFeesRateNoMinMax = (1 + gst) * (brokerageFeeRate + clearingFeeRate + accessFeeRate);\n  const targetEarning = budget + minProfit;\n  const targetProceeds = targetEarning / (1 - (totalFeesRateNoMinMax));\n\n  return roundUpTo2Decimal(targetProceeds / quantity);\n}\n\nconst roundUpTo2Decimal = (value) => {\n  return Math.ceil(value * 100) / 100;\n}","import {SET_BUYPRICE, SET_BUDGET, SET_QUANTITY, SET_MINPROFIT} from './actionTypes';\nimport {getBudget, getSellingPrice} from '../services/Calculator';\n\nconst initialState = {\n  buyPrice: null,\n  budget: null,\n  quantity: null,\n  minProfit: null,\n  calculatedSellingPrice: null,\n\n  // Config\n  brokerageFeeRate: 0.00275,\n  minBrokerageFee: 25,\n  clearingFeeRate: 0.000325,\n  maximumClearingFee: 600,\n  accessFeeRate: 0.000075,\n  gst: 0.07\n};\n\n\nexport default function(state = initialState, action) {\n  let endState = {...state};\n  let calculatedBudget;\n\n  switch (action.type) {\n    case SET_BUYPRICE:\n      const buyPriceInput = parseFloat(action.payload.buyPriceInput);\n      calculatedBudget = getBudget(buyPriceInput, state.quantity);\n\n      endState.buyPrice = buyPriceInput;\n      endState.budget = calculatedBudget;\n      break;\n    case SET_QUANTITY:\n      const quantityInput = parseFloat(action.payload.quantityInput);\n      calculatedBudget = getBudget(state.buyPrice, quantityInput);\n\n      endState.quantity = quantityInput;\n      endState.budget = calculatedBudget;\n      break;\n    // case SET_BUDGET:\n    //   const budgetInput = parseFloat(action.payload.budgetInput);\n\n    //   endState.budget = budgetInput;\n    //   break;\n    case SET_MINPROFIT:\n      const minProfitInput = parseFloat(action.payload.minProfitInput);\n      endState.minProfit = minProfitInput;\n      break;\n  }\n\n  const calculatedSellingPrice = getSellingPrice(endState.quantity, endState.budget, endState.minProfit);\n  endState.calculatedSellingPrice = calculatedSellingPrice;\n  return endState;\n}","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer);\n","export const SET_BUYPRICE = 'SET_BUYPRICE';\nexport const SET_BUDGET = 'SET_BUDGET';\nexport const SET_QUANTITY = 'SET_QUANTITY';\nexport const SET_MINPROFIT = 'SET_MINPROFIT';","import React, { Component } from 'react';\n\nclass Config extends Component {\n  render() {\n    return (\n      <div>Various Fees</div>\n    );\n  }\n}\n\nexport default Config;\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport Config from './Config';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n};\n\nconst TopBar = (props) => {\n  const { classes } = props;\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n            SGX Quick Profit Calculator\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Config />\n    </div>\n  );\n}\n\nexport default withStyles(styles)(TopBar);","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { connect } from \"react-redux\";\nimport { setBuyPrice, setBudget, setQuantity, setMinProfit } from \"../redux/actions\";\nimport NumberFormat from 'react-number-format';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\n\nconst inputTypeEnum = {\n  BUY_PRICE: 'buyPrice',\n  QUANTITY: 'quantity',\n  BUDGET: 'budget',\n  MIN_PROFIT: 'minProfit'\n}\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  card: {\n    minWidth: 275,\n  },\n  margin: {\n    margin: theme.spacing.unit,\n  },\n  textField: {\n    flexBasis: 200,\n  },\n});\n\nconst PrettyNumberFormat = (props) => {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={values => {\n        onChange({\n          target: {\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n    />\n  );\n}\n\nPrettyNumberFormat.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nclass Input extends Component {\n  handleChange = inputType => event => {\n    const inputValue = event.target.value;\n    switch (inputType) {\n      case inputTypeEnum.BUY_PRICE:\n        this.props.setBuyPrice(inputValue);\n        break;\n      case inputTypeEnum.QUANTITY:\n        this.props.setQuantity(inputValue);\n        break;\n      case inputTypeEnum.BUDGET:\n        this.props.setBudget(inputValue);\n        break;\n      case inputTypeEnum.MIN_PROFIT:\n        this.props.setMinProfit(inputValue);\n        break;\n    }\n\n    this.setState({ [inputType]: inputValue });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <Card className={classes.card}>\n        <CardContent>\n          <TextField\n            id=\"buying-price\"\n            className={classNames(classes.margin, classes.textField)}\n            variant=\"outlined\"\n            label=\"Buying Price\"\n            value={this.props.buyPrice}\n            onChange={this.handleChange(inputTypeEnum.BUY_PRICE)}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n              inputComponent: PrettyNumberFormat\n            }}\n          />\n          <Grid container spacing={24}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                id=\"Quantity\"\n                className={classNames(classes.margin, classes.textField)}\n                variant=\"outlined\"\n                label=\"No. of Shares\"\n                value={this.props.quantity}\n                onChange={this.handleChange(inputTypeEnum.QUANTITY)}\n                InputProps={{\n                  inputComponent: PrettyNumberFormat\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                id=\"budget\"\n                className={classNames(classes.margin, classes.textField)}\n                variant=\"outlined\"\n                label=\"Budget\"\n                value={this.props.budget}\n                disabled\n                InputProps={{\n                  startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                  inputComponent: PrettyNumberFormat\n                }}\n              />\n            </Grid>\n          </Grid>\n          <TextField\n            id=\"minProfit\"\n            className={classNames(classes.margin, classes.textField)}\n            variant=\"outlined\"\n            label=\"Min. Profit\"\n            value={this.props.minProfit}\n            onChange={this.handleChange(inputTypeEnum.MIN_PROFIT)}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n              inputComponent: PrettyNumberFormat\n            }}\n          />\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nInput.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    buyPrice: state.buyPrice,\n    budget: state.budget,\n    quantity: state.quantity,\n    minProfit: state.minProfit\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  { setBuyPrice, setBudget, setQuantity, setMinProfit }\n)(withStyles(styles)(Input));\n","import {SET_BUYPRICE, SET_BUDGET, SET_QUANTITY, SET_MINPROFIT} from './actionTypes';\n\nexport const setBuyPrice = buyPriceInput => ({\n    type: SET_BUYPRICE,\n    payload: {buyPriceInput}\n});\n\nexport const setBudget = budgetInput => ({\n    type: SET_BUDGET,\n    payload: {budgetInput}\n});\n\nexport const setQuantity = quantityInput => ({\n    type: SET_QUANTITY,\n    payload: {quantityInput}\n});\n\nexport const setMinProfit = minProfitInput => ({\n    type: SET_MINPROFIT,\n    payload: {minProfitInput}\n});","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { connect } from \"react-redux\";\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\n\nclass Output extends Component {\n  render() {\n    return (\n      <Card>\n        <CardContent>\n        Selling price: {this.props.calculatedSellingPrice}\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    calculatedSellingPrice: state.calculatedSellingPrice\n  }\n}\n\nexport default connect(mapStateToProps)(Output);\n","import React, { Component } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\n\nimport TopBar from './views/TopBar';\nimport Input from './views/Input';\nimport Output from './views/Output';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <TopBar />\n        <Grid container spacing={24}>\n          <Grid item xs={12} sm={6}>\n            <Input />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Output />\n          </Grid>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport './index.css';\nimport App from './App';\n\nimport {configStateListener} from './services/Calculator';\n\nconst rootElement = document.getElementById('root');\n\nconst unsubscribe = store.subscribe(() => configStateListener(store.getState()));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n\n// import * as serviceWorker from './serviceWorker';\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}