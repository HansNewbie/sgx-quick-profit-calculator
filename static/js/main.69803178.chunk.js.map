{"version":3,"sources":["services/Calculator.js","redux/reducers.js","redux/store.js","redux/actionTypes.js","views/Config.jsx","views/TopBar.jsx","views/Input.jsx","redux/actions.js","views/Output.jsx","App.jsx","index.js"],"names":["configState","brokerageFeeRate","minBrokerageFee","clearingFeeRate","maximumClearingFee","accessFeeRate","gst","roundUpTo2Decimal","value","Math","ceil","initialState","buyPrice","budget","quantity","minProfit","calculatedSellingPrice","createStore","state","arguments","length","undefined","action","endState","Object","objectSpread","type","buyPriceInput","parseFloat","payload","quantityInput","calculatedBudget","buyingPrice","proceeds","brokerageFee","max","clearingFee","min","accessFee","gstAmount","getBudget","minProfitInput","getSellingPrice","Config","react_default","a","createElement","Component","withStyles","root","flexGrow","grow","menuButton","marginLeft","marginRight","props","classes","className","AppBar_default","position","Toolbar_default","IconButton_default","color","aria-label","Menu_default","Typography_default","variant","views_Config","inputTypeEnum","BUY_PRICE","QUANTITY","BUDGET","MIN_PROFIT","PrettyNumberFormat","inputRef","onChange","other","objectWithoutProperties","number_format_default","assign","getInputRef","onValueChange","values","target","thousandSeparator","Input","handleChange","inputType","event","inputValue","_this","setBuyPrice","setQuantity","setBudget","setMinProfit","setState","defineProperty","this","Card_default","card","CardContent_default","TextField_default","id","classNames","margin","textField","label","InputProps","startAdornment","InputAdornment_default","inputComponent","Grid_default","container","spacing","item","xs","sm","disabled","connect","budgetInput","theme","display","flexWrap","minWidth","unit","flexBasis","Output","App","Fragment","CssBaseline_default","views_TopBar","views_Input","views_Output","rootElement","document","getElementById","store","subscribe","configStateListener","getState","ReactDOM","render","es","src_App"],"mappings":"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","file":"static/js/main.69803178.chunk.js","sourcesContent":["/* Rules\r\n * =====\r\n * - GST on brokerage fee, clearing fee and SGX trading fee (excluding share price)\r\n * - Brokerage fee, clearing fee, SGX trading fee is round up to 2 decimal (always round up)\r\n */\r\nimport store from '../redux/store';\r\n\r\nlet configState = {\r\n  brokerageFeeRate: null,\r\n  minBrokerageFee: null,\r\n  clearingFeeRate: null,\r\n  maximumClearingFee: null,\r\n  accessFeeRate: null,\r\n  gst: null\r\n}\r\n\r\nexport const configStateListener = (state) => {\r\n  const { brokerageFeeRate, minBrokerageFee, clearingFeeRate, maximumClearingFee, accessFeeRate, gst} = state;\r\n  configState = {\r\n    brokerageFeeRate: brokerageFeeRate,\r\n    minBrokerageFee: minBrokerageFee,\r\n    clearingFeeRate: clearingFeeRate,\r\n    maximumClearingFee: maximumClearingFee,\r\n    accessFeeRate: accessFeeRate,\r\n    gst: gst\r\n  }\r\n}\r\n\r\nexport const getBudget = (buyingPrice, quantity,\r\n    brokerageFeeRate = configState.brokerageFeeRate,\r\n    minBrokerageFee = configState.minBrokerageFee,\r\n    clearingFeeRate = configState.clearingFeeRate,\r\n    maximumClearingFee = configState.maximumClearingFee,\r\n    accessFeeRate = configState.accessFeeRate,\r\n    gst = configState.gst) => {\r\n  const proceeds = buyingPrice * quantity;\r\n  const brokerageFee = roundUpTo2Decimal(Math.max(proceeds * brokerageFeeRate, minBrokerageFee));\r\n  const clearingFee = roundUpTo2Decimal(Math.min(proceeds * clearingFeeRate, maximumClearingFee));\r\n  const accessFee = roundUpTo2Decimal(proceeds * accessFeeRate);\r\n  const gstAmount = roundUpTo2Decimal(gst * (brokerageFee + clearingFee + accessFee));\r\n\r\n  return roundUpTo2Decimal(proceeds + brokerageFee + clearingFee + accessFee + gstAmount);\r\n}\r\n\r\n// export const getQuantity = (buyingPrice, budget, rounding = 100,\r\n//     brokerageFeeRate = configState.brokerageFeeRate,\r\n//     minBrokerageFee = configState.minBrokerageFee,\r\n//     clearingFeeRate = configState.clearingFeeRate,\r\n//     maximumClearingFee = configState.maximumClearingFee,\r\n//     accessFeeRate = configState.accessFeeRate,\r\n//     gst = configState.gst) => {\r\n//   const totalFeesRateNoMinMax = (1 + gst) * (brokerageFeeRate + clearingFeeRate + accessFeeRate);\r\n//   const quantity = budget / (1 + (totalFeesRateNoMinMax));\r\n//   return quantity;\r\n// }\r\n\r\nexport const getSellingPrice = (quantity, budget, minProfit,\r\n    brokerageFeeRate = configState.brokerageFeeRate,\r\n    minBrokerageFee = configState.minBrokerageFee,\r\n    clearingFeeRate = configState.clearingFeeRate,\r\n    maximumClearingFee = configState.maximumClearingFee,\r\n    accessFeeRate = configState.accessFeeRate,\r\n    gst = configState.gst) => {\r\n  if (quantity === null || budget === null || minProfit === null) {\r\n    return null;\r\n  }\r\n\r\n  const totalFeesRateNoMinMax = (1 + gst) * (brokerageFeeRate + clearingFeeRate + accessFeeRate);\r\n  const targetEarning = budget + minProfit;\r\n  const targetProceeds = targetEarning / (1 - (totalFeesRateNoMinMax));\r\n\r\n  return roundUpTo2Decimal(targetProceeds / quantity);\r\n}\r\n\r\nconst roundUpTo2Decimal = (value) => {\r\n  return Math.ceil(value * 100) / 100;\r\n}","import {SET_BUYPRICE, SET_BUDGET, SET_QUANTITY, SET_MINPROFIT} from './actionTypes';\r\nimport {getBudget, getSellingPrice} from '../services/Calculator';\r\n\r\nconst initialState = {\r\n  buyPrice: null,\r\n  budget: null,\r\n  quantity: null,\r\n  minProfit: null,\r\n  calculatedSellingPrice: null,\r\n\r\n  // Config\r\n  brokerageFeeRate: 0.00275,\r\n  minBrokerageFee: 25,\r\n  clearingFeeRate: 0.000325,\r\n  maximumClearingFee: 600,\r\n  accessFeeRate: 0.000075,\r\n  gst: 0.07\r\n};\r\n\r\n\r\nexport default function(state = initialState, action) {\r\n  let endState = {...state};\r\n\r\n  switch (action.type) {\r\n    case SET_BUYPRICE:\r\n      const buyPriceInput = parseFloat(action.payload.buyPriceInput);\r\n\r\n      endState.buyPrice = buyPriceInput;\r\n      break;\r\n    case SET_QUANTITY:\r\n      const quantityInput = parseFloat(action.payload.quantityInput);\r\n      const calculatedBudget = getBudget(state.buyPrice, quantityInput);\r\n\r\n      endState.quantity = quantityInput;\r\n      endState.budget = calculatedBudget;\r\n      break;\r\n    // case SET_BUDGET:\r\n    //   const budgetInput = parseFloat(action.payload.budgetInput);\r\n\r\n    //   endState.budget = budgetInput;\r\n    //   break;\r\n    case SET_MINPROFIT:\r\n      const minProfitInput = parseFloat(action.payload.minProfitInput);\r\n      endState.minProfit = minProfitInput;\r\n      break;\r\n  }\r\n\r\n  const calculatedSellingPrice = getSellingPrice(endState.quantity, endState.budget, endState.minProfit);\r\n  endState.calculatedSellingPrice = calculatedSellingPrice;\r\n  return endState;\r\n}","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport default createStore(rootReducer);\r\n","export const SET_BUYPRICE = 'SET_BUYPRICE';\r\nexport const SET_BUDGET = 'SET_BUDGET';\r\nexport const SET_QUANTITY = 'SET_QUANTITY';\r\nexport const SET_MINPROFIT = 'SET_MINPROFIT';","import React, { Component } from 'react';\r\n\r\nclass Config extends Component {\r\n  render() {\r\n    return (\r\n      <div>Various Fees</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Config;\r\n","import React, { Component } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport Config from './Config';\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n};\r\n\r\nconst TopBar = (props) => {\r\n  const { classes } = props;\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n            SGX Quick Profit Calculator\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Config />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles)(TopBar);","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { setBuyPrice, setBudget, setQuantity, setMinProfit } from \"../redux/actions\";\r\nimport NumberFormat from 'react-number-format';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst inputTypeEnum = {\r\n  BUY_PRICE: 'buyPrice',\r\n  QUANTITY: 'quantity',\r\n  BUDGET: 'budget',\r\n  MIN_PROFIT: 'minProfit'\r\n}\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  card: {\r\n    minWidth: 275,\r\n  },\r\n  margin: {\r\n    margin: theme.spacing.unit,\r\n  },\r\n  textField: {\r\n    flexBasis: 200,\r\n  },\r\n});\r\n\r\nconst PrettyNumberFormat = (props) => {\r\n  const { inputRef, onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={values => {\r\n        onChange({\r\n          target: {\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      thousandSeparator\r\n    />\r\n  );\r\n}\r\n\r\nPrettyNumberFormat.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nclass Input extends Component {\r\n  handleChange = inputType => event => {\r\n    const inputValue = event.target.value;\r\n    switch (inputType) {\r\n      case inputTypeEnum.BUY_PRICE:\r\n        this.props.setBuyPrice(inputValue);\r\n        break;\r\n      case inputTypeEnum.QUANTITY:\r\n        this.props.setQuantity(inputValue);\r\n        break;\r\n      case inputTypeEnum.BUDGET:\r\n        this.props.setBudget(inputValue);\r\n        break;\r\n      case inputTypeEnum.MIN_PROFIT:\r\n        this.props.setMinProfit(inputValue);\r\n        break;\r\n    }\r\n\r\n    this.setState({ [inputType]: inputValue });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <Card className={classes.card}>\r\n        <CardContent>\r\n          <TextField\r\n            id=\"buying-price\"\r\n            className={classNames(classes.margin, classes.textField)}\r\n            variant=\"outlined\"\r\n            label=\"Buying Price\"\r\n            value={this.props.buyPrice}\r\n            onChange={this.handleChange(inputTypeEnum.BUY_PRICE)}\r\n            InputProps={{\r\n              startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n              inputComponent: PrettyNumberFormat\r\n            }}\r\n          />\r\n          <Grid container spacing={24}>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                id=\"Quantity\"\r\n                className={classNames(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n                label=\"No. of Shares\"\r\n                value={this.props.quantity}\r\n                onChange={this.handleChange(inputTypeEnum.QUANTITY)}\r\n                InputProps={{\r\n                  inputComponent: PrettyNumberFormat\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                id=\"budget\"\r\n                className={classNames(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n                label=\"Budget\"\r\n                value={this.props.budget}\r\n                disabled\r\n                InputProps={{\r\n                  startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n                  inputComponent: PrettyNumberFormat\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <TextField\r\n            id=\"minProfit\"\r\n            className={classNames(classes.margin, classes.textField)}\r\n            variant=\"outlined\"\r\n            label=\"Min. Profit\"\r\n            value={this.props.minProfit}\r\n            onChange={this.handleChange(inputTypeEnum.MIN_PROFIT)}\r\n            InputProps={{\r\n              startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\r\n              inputComponent: PrettyNumberFormat\r\n            }}\r\n          />\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nInput.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    buyPrice: state.buyPrice,\r\n    budget: state.budget,\r\n    quantity: state.quantity,\r\n    minProfit: state.minProfit\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { setBuyPrice, setBudget, setQuantity, setMinProfit }\r\n)(withStyles(styles)(Input));\r\n","import {SET_BUYPRICE, SET_BUDGET, SET_QUANTITY, SET_MINPROFIT} from './actionTypes';\r\n\r\nexport const setBuyPrice = buyPriceInput => ({\r\n    type: SET_BUYPRICE,\r\n    payload: {buyPriceInput}\r\n});\r\n\r\nexport const setBudget = budgetInput => ({\r\n    type: SET_BUDGET,\r\n    payload: {budgetInput}\r\n});\r\n\r\nexport const setQuantity = quantityInput => ({\r\n    type: SET_QUANTITY,\r\n    payload: {quantityInput}\r\n});\r\n\r\nexport const setMinProfit = minProfitInput => ({\r\n    type: SET_MINPROFIT,\r\n    payload: {minProfitInput}\r\n});","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\n\r\nclass Output extends Component {\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardContent>\r\n        Selling price: {this.props.calculatedSellingPrice}\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    calculatedSellingPrice: state.calculatedSellingPrice\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Output);\r\n","import React, { Component } from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport TopBar from './views/TopBar';\r\nimport Input from './views/Input';\r\nimport Output from './views/Output';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <CssBaseline />\r\n        <TopBar />\r\n        <Grid container spacing={24}>\r\n          <Grid item xs={12} sm={6}>\r\n            <Input />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Output />\r\n          </Grid>\r\n        </Grid>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport {configStateListener} from './services/Calculator';\r\n\r\nconst rootElement = document.getElementById('root');\r\n\r\nconst unsubscribe = store.subscribe(() => configStateListener(store.getState()));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  rootElement\r\n);\r\n\r\n// import * as serviceWorker from './serviceWorker';\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}